@page "/"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>Home</PageTitle>

<div class="container mt-4">
    <div class="text-center mb-4">
        <h1 class="display-4">Welcome to TriloBot Control</h1>
        <p class="lead">Use the buttons below to control your TriloBot.</p>
    </div>

    <div class="text-center mb-4" style="aspect-ratio:16/9;max-width:100%;max-height:480px;display:flex;justify-content:center;align-items:center;">
         <iframe src="http://pi5:8889/cam/"  alt="TriloBot Live Stream" style="aspect-ratio:16/9;width:100%;max-width:100%;max-height:480px;object-fit:contain;background:black;" />
    </div>

    <!-- Optional: Display the live stream if available -->
    <div class="alert alert-info text-center">
        @if (isObjectTooNear)
        {
            <p class="mb-0">An object seems to be near.</p>
        }
        else
        {
            <p class="mb-0">No objects in driving path.</p>
        }
    </div>

    <!-- Motor controls -->
    <div class="card mb-4">
        <div class="card-header">Motor Control</div>
        <div class="card-body text-center">
            <button class="btn btn-success m-1" @onclick="Forward">Forward</button>
            <button class="btn btn-danger m-1" @onclick="Backward">Backward</button>
            <button class="btn btn-warning m-1" @onclick="TurnLeft">Left</button>
            <button class="btn btn-warning m-1" @onclick="TurnRight">Right</button>
            <button class="btn btn-secondary m-1" @onclick="Stop">Stop</button>
        </div>
    </div>

    <!-- Light controls -->
    <div class="card mb-4">
        <div class="card-header">Lights</div>
        <div class="card-body">
            <h5>Button LEDs</h5>
            <div class="d-flex flex-wrap mb-3">
                <button class="btn btn-outline-primary m-1" @onclick='() => SetButtonLed(6, 1)'>Button A LED
                    On</button>
                <button class="btn btn-outline-secondary m-1" @onclick='() => SetButtonLed(6, 0)'>Button A LED
                    Off</button>
                <button class="btn btn-outline-primary m-1" @onclick='() => SetButtonLed(7, 1)'>Button B LED
                    On</button>
                <button class="btn btn-outline-secondary m-1" @onclick='() => SetButtonLed(7, 0)'>Button B LED
                    Off</button>
                <button class="btn btn-outline-primary m-1" @onclick='() => SetButtonLed(8, 1)'>Button X LED
                    On</button>
                <button class="btn btn-outline-secondary m-1" @onclick='() => SetButtonLed(8, 0)'>Button X LED
                    Off</button>
                <button class="btn btn-outline-primary m-1" @onclick='() => SetButtonLed(9, 1)'>Button Y LED
                    On</button>
                <button class="btn btn-outline-secondary m-1" @onclick='() => SetButtonLed(9, 0)'>Button Y LED
                    Off</button>
            </div>

            <h5>Underlighting</h5>
            <div class="d-flex flex-wrap">
                <button class="btn btn-danger m-1" @onclick="() => FillUnderlighting(255, 0, 0)">Underlight Red</button>
                <button class="btn btn-success m-1" @onclick="() => FillUnderlighting(0, 255, 0)">Underlight
                    Green</button>
                <button class="btn btn-primary m-1" @onclick="() => FillUnderlighting(0, 0, 255)">Underlight Blue</button>
                <button class="btn btn-primary m-1" @onclick="() => FillUnderlighting(128, 0, 128)">Underlight
                    Purple</button>
                <button class="btn btn-light m-1" @onclick="() => FillUnderlighting(255, 255, 255)">Underlight
                    White</button>
                <button class="btn btn-dark m-1" @onclick="() => FillUnderlighting(0, 0, 0)">Underlight Off</button>
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Injected NavigationManager for handling navigation.
    /// </summary>
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    /// <summary>
    /// SignalR hub connection for real-time communication.
    /// </summary>
    private HubConnection? hubConnection;

    /// <summary>
    /// Indicates whether an object is too near to the TriloBot.
    /// </summary>
    private bool isObjectTooNear;

    /// <summary>
    /// Initializes the SignalR hub connection and subscribes to the ObjectTooNearStream.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/trilobotHub"))
        .WithAutomaticReconnect()
        .Build();

        // Connect to SignalR hub
        await hubConnection.StartAsync();

        // Subscribe to ObjectTooNearStream
        var objectTooNearStream = hubConnection.StreamAsync<bool>("ObjectTooNearStream");
        _ = Task.Run(async () =>
        {
            await foreach (var isNear in objectTooNearStream)
            {
                isObjectTooNear = isNear;
                await InvokeAsync(StateHasChanged);
            }
        });

        // Start distance monitoring
        await hubConnection.InvokeAsync("StartDistanceMonitoring");
    }

    /// <summary>
    /// Invokes a motor control method on the SignalR hub.
    /// </summary>
    /// <param name="method">The name of the motor control method to invoke.</param>
    private async Task CallMotor(string method)
    {
        if (hubConnection is null) return;
        await hubConnection.InvokeAsync(method);
    }

    /// <summary>
    /// Moves the TriloBot forward.
    /// </summary>
    private Task Forward() => CallMotor("Forward");

    /// <summary>
    /// Moves the TriloBot backward.
    /// </summary>
    private Task Backward() => CallMotor("Backward");

    /// <summary>
    /// Turns the TriloBot to the left.
    /// </summary>
    private Task TurnLeft() => CallMotor("TurnLeft");

    /// <summary>
    /// Turns the TriloBot to the right.
    /// </summary>
    private Task TurnRight() => CallMotor("TurnRight");

    /// <summary>
    /// Stops the TriloBot's movement.
    /// </summary>
    private Task Stop() => CallMotor("Stop");

    /// <summary>
    /// Sets the LED state for a specific button.
    /// </summary>
    /// <param name="lightId">The light identifier (e.g., 0 -> ButtonA LED).</param>
    /// <param name="value">The LED state (1 for on, 0 for off).</param>
    private async Task SetButtonLed(int lightId, double value)
    {
        if (hubConnection is null) return;
        await hubConnection.InvokeAsync("SetButtonLed", lightId, value);
    }

    /// <summary>
    /// Sets the underlighting color of the TriloBot.
    /// </summary>
    /// <param name="r">Red component (0-255).</param>
    /// <param name="g">Green component (0-255).</param>
    /// <param name="b">Blue component (0-255).</param>
    private async Task FillUnderlighting(byte r, byte g, byte b)
    {
        if (hubConnection is null) return;
        await hubConnection.InvokeAsync("FillUnderlighting", r, g, b);
    }
}
