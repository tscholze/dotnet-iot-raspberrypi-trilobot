@page "/"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>Home</PageTitle>

<div>
    <h1>Welcome to TriloBot Remote Control</h1>
    <p>Use the buttons below to control your TriloBot.</p>
</div>

<h1>TriloBot Remote Control</h1>

<div style="margin-bottom: 1em;">
    <button @onclick="TakePhoto">Take Photo</button>
    @if (!string.IsNullOrEmpty(photoPath))
    {
        <img src="@photoPath" alt="Photo" style="max-width:400px; display:block; margin-top:0.5em;" />
    }
</div>

<h2>Live Stream</h2>
<div style="margin-bottom: 1em;">
    @if (!string.IsNullOrEmpty(streamUrl))
    {
        <img src="@streamUrl" alt="Live Stream" style="max-width:400px; border:1px solid #ccc;" />
    }
</div>


<div style="margin-bottom: 1em;">
    <button @onclick="Forward">Forward</button>
    <button @onclick="Backward">Backward</button>
    <button @onclick="TurnLeft">Left</button>
    <button @onclick="TurnRight">Right</button>
    <button @onclick="Stop">Stop</button>
</div>

<h2>Lights</h2>
<div style="margin-bottom: 1em;">
    <button @onclick='() => SetButtonLed("ButtonA", 1)'>Button A LED On</button>
    <button @onclick='() => SetButtonLed("ButtonA", 0)'>Button A LED Off</button>
    <button @onclick='() => SetButtonLed("ButtonB", 1)'>Button B LED On</button>
    <button @onclick='() => SetButtonLed("ButtonB", 0)'>Button B LED Off</button>
    <button @onclick='() => SetButtonLed("ButtonX", 1)'>Button X LED On</button>
    <button @onclick='() => SetButtonLed("ButtonX", 0)'>Button X LED Off</button>
    <button @onclick='() => SetButtonLed("ButtonY", 1)'>Button Y LED On</button>
    <button @onclick='() => SetButtonLed("ButtonY", 0)'>Button Y LED Off</button>
</div>
<div style="margin-bottom: 1em;">
    <button @onclick="() => FillUnderlighting(255,0,0)">Underlight Red</button>
    <button @onclick="() => FillUnderlighting(0,255,0)">Underlight Green</button>
    <button @onclick="() => FillUnderlighting(0,0,255)">Underlight Blue</button>
    <button @onclick="() => FillUnderlighting(255,255,255)">Underlight White</button>
    <button @onclick="() => FillUnderlighting(0,0,0)">Underlight Off</button>
</div>

@if (isObjectTooNear)
{
    <p>NEAR</p>
}
else
{
    <p>WIDE</p>
}

@code {
    #region Injections 

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    #endregion

    #region Private fields 

    private HubConnection? hubConnection;
    private string? photoPath;
    private string? streamUrl;
    private bool isObjectTooNear;

    #endregion

    #region Lifecycle methods

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/trilobotHub"))
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();

        // Subscribe to live stream URL updates via SignalR streaming
        var stream = hubConnection.StreamAsync<string>("LiveVideoFeedStream");
        _ = Task.Run(async () => {
            await foreach (var url in stream)
            {
                streamUrl = url;
                await InvokeAsync(StateHasChanged);
            }
        });

        // Subscribe to ObjectTooNearStream
        var objectTooNearStream = hubConnection.StreamAsync<bool>("ObjectTooNearStream");
        _ = Task.Run(async () => {
            await foreach (var isNear in objectTooNearStream)
            {
                Console.WriteLine($"Object too near: {isNear}");
                isObjectTooNear = isNear;

                await InvokeAsync(StateHasChanged);
            }
        });

        // Optionally, get the initial live stream URL
        try
        {
            streamUrl = await hubConnection.InvokeAsync<string>("GetLiveStreamUrl");
        }
        catch
        {
            streamUrl = string.Empty;
        }
    }

    #endregion

    #region Photo

    private async Task TakePhoto()
    {
        if (hubConnection is null) return;
        var savePath = "wwwroot/photos";
        try
        {
            var file = await hubConnection.InvokeAsync<string>("TakePhoto", savePath);
            if (!string.IsNullOrEmpty(file))
                photoPath = "/photos/" + System.IO.Path.GetFileName(file);
            else
                photoPath = null;
        }
        catch
        {
            photoPath = null;
        }
        StateHasChanged();
    }

    #endregion

    #region Motor Control

    private async Task CallMotor(string method)
    {
        if (hubConnection is null) return;
        await hubConnection?.InvokeAsync(method);
    }

    private Task Forward() => CallMotor("Forward");
    private Task Backward() => CallMotor("Backward");
    private Task TurnLeft() => CallMotor("TurnLeft");
    private Task TurnRight() => CallMotor("TurnRight");
    private Task Stop() => CallMotor("Stop");

    #endregion

    #region Lights

    private async Task SetButtonLed(string button, double value)
    {
        if (hubConnection is null) return;
        await hubConnection?.InvokeAsync("SetButtonLed", button, value);
    }

    private async Task FillUnderlighting(byte r, byte g, byte b)
    {
        if (hubConnection is null) return;
        await hubConnection?.InvokeAsync("FillUnderlighting", r, g, b);
    }

    #endregion
}

