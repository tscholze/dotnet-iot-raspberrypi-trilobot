@page "/"
@rendermode InteractiveServer
@implements IDisposable

@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>Home</PageTitle>

<div class="container mt-4">
    <div class="text-center mb-4">
        <h1 class="display-4">Welcome to TriloBot Control</h1>
        <p class="lead">Use the buttons below to control your TriloBot.</p>
    </div>

    <div class="text-center mb-4"
         style="aspect-ratio:16/9;max-width:100%;max-height:480px;display:flex;justify-content:center;align-items:center;">
        <iframe src="http://pi5:8889/cam/" alt="TriloBot Live Stream"
                style="aspect-ratio:16/9;width:100%;max-width:100%;max-height:480px;object-fit:contain;background:black;"/>
    </div>

    <!-- Optional: Display the live stream if available -->
    <div class="alert alert-info text-center">
        @if (_isObjectTooNear)
        {
            <p class="mb-0"><strong>@_distance</strong> - An object seems to be near.</p>
        }
        else
        {
            <p class="mb-0"><strong>@_distance</strong> - No objects in driving path.</p>
        }
    </div>

    <!-- Joystick controls -->
    <div class="card mb-4"></div>
        <div class="card-header">Joystick Control</div>
        <div class="card-body text-center">
            <div class="joystick-container" 
                 @onmousedown="OnJoystickMouseDown" 
                 @onmousemove="OnJoystickMouseMove" 
                 @onmouseup="OnJoystickMouseUp" 
                 @onmouseleave="OnJoystickMouseUp"
                 @ontouchstart="OnJoystickTouchStart"
                 @ontouchmove="OnJoystickTouchMove" 
                 @ontouchend="OnJoystickTouchEnd">
                <div class="joystick-base">
                    <div class="joystick-knob" style="transform: translate(@(_knobX)px, @(_knobY)px)"></div>
                </div>
            </div>
            <div class="mt-2">
                <small class="text-muted">
                    H: @(_currentHorizontal.ToString("F2")) | V: @(_currentVertical.ToString("F2"))
                </small>
            </div>
        </div>
    ✔">

    <!-- Motor controls -->
    <div class="card mb-4">
        <div class="card-header">Motor Control</div>
        <div class="card-body text-center">
            <button class="btn btn-success m-1" @onclick="Forward">Forward</button>
            <button class="btn btn-danger m-1" @onclick="Backward">Backward</button>
            <button class="btn btn-warning m-1" @onclick="TurnLeft">Left</button>
            <button class="btn btn-warning m-1" @onclick="TurnRight">Right</button>
            <button class="btn btn-secondary m-1" @onclick="Stop">Stop</button>
        </div>
    </div>

    <!-- Light controls -->
    <div class="card mb-4">
        <div class="card-header">Lights</div>
        <div class="card-body">
            <h5>Button LEDs</h5>
            <div class="d-flex flex-wrap mb-3">
                <button class="btn btn-outline-primary m-1" @onclick='() => SetButtonLed(6, 1)'>Button A LED
                    On
                </button>
                <button class="btn btn-outline-secondary m-1" @onclick='() => SetButtonLed(6, 0)'>Button A LED
                    Off
                </button>
                <button class="btn btn-outline-primary m-1" @onclick='() => SetButtonLed(7, 1)'>Button B LED
                    On
                </button>
                <button class="btn btn-outline-secondary m-1" @onclick='() => SetButtonLed(7, 0)'>Button B LED
                    Off
                </button>
                <button class="btn btn-outline-primary m-1" @onclick='() => SetButtonLed(8, 1)'>Button X LED
                    On
                </button>
                <button class="btn btn-outline-secondary m-1" @onclick='() => SetButtonLed(8, 0)'>Button X LED
                    Off
                </button>
                <button class="btn btn-outline-primary m-1" @onclick='() => SetButtonLed(9, 1)'>Button Y LED
                    On
                </button>
                <button class="btn btn-outline-secondary m-1" @onclick='() => SetButtonLed(9, 0)'>Button Y LED
                    Off
                </button>
            </div>

            <h5>Underlighting</h5>
            <div class="d-flex flex-wrap">
                <button class="btn btn-danger m-1" @onclick="() => FillUnderlighting(255, 0, 0)">Underlight Red</button>
                <button class="btn btn-success m-1" @onclick="() => FillUnderlighting(0, 255, 0)">Underlight
                    Green
                </button>
                <button class="btn btn-primary m-1" @onclick="() => FillUnderlighting(0, 0, 255)">Underlight Blue
                </button>
                <button class="btn btn-primary m-1" @onclick="() => FillUnderlighting(128, 0, 128)">Underlight
                    Purple
                </button>
                <button class="btn btn-light m-1" @onclick="() => FillUnderlighting(255, 255, 255)">Underlight
                    White
                </button>
                <button class="btn btn-dark m-1" @onclick="() => FillUnderlighting(0, 0, 0)">Underlight Off</button>
            </div>
        </div>
    </div>
</div>

<style>
    .joystick-container {
        display: inline-block;
        touch-action: none;
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        cursor: grab;
    }
    
    .joystick-container:active {
        cursor: grabbing;
    }
    
    .joystick-base {
        width: 200px;
        height: 200px;
        border-radius: 50%;
        background: linear-gradient(145deg, #e6e6e6, #ffffff);
        border: 3px solid #ddd;
        position: relative;
        box-shadow: inset 0 0 20px rgba(0,0,0,0.1);
    }
    
    .joystick-knob {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(145deg, #4CAF50, #45a049);
        border: 2px solid #388E3C;
        position: absolute;
        top: 50%;
        left: 50%;
        margin-left: -30px;
        margin-top: -30px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        cursor: grab;
        will-change: transform;
    }
    
    .joystick-knob:active {
        cursor: grabbing;
        box-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }
</style>

@code {

    /// <summary>
    /// Injected NavigationManager for handling navigation.
    /// </summary>
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    /// <summary>
    /// SignalR hub connection for real-time communication.
    /// </summary>
    private HubConnection? _hubConnection;

    /// <summary>
    /// Indicates whether an object is too near to the TriloBot.
    /// </summary>
    private bool _isObjectTooNear;

    /// <summary>
    /// Distance to the nearest object detected by the TriloBot.
    /// This value is updated in real-time by the SignalR hub.
    /// </summary>
    private double _distance = 0.0;

    /// <summary>
    /// Subscription for the ObjectTooNear observable.
    /// </summary>
    private IDisposable? _objectTooNearSubscription;

    /// <summary>
    /// Subscription for the Distance observable.
    /// </summary>
    private IDisposable? _distanceSubscription;

    // Joystick state variables
    
    /// <summary>
    /// Indicates whether the joystick is currently being dragged.
    /// </summary>
    private bool _isDragging = false;
    
    /// <summary>
    /// Current X position of the joystick knob in pixels.
    /// </summary>
    private double _knobX = 0;
    
    /// <summary>
    /// Current Y position of the joystick knob in pixels.
    /// </summary>
    private double _knobY = 0;
    
    /// <summary>
    /// Current horizontal movement value (-1.0 to 1.0).
    /// Negative values indicate left movement, positive values indicate right movement.
    /// </summary>
    private double _currentHorizontal = 0.0;
    
    /// <summary>
    /// Current vertical movement value (-1.0 to 1.0).
    /// Negative values indicate backward movement, positive values indicate forward movement.
    /// </summary>
    private double _currentVertical = 0.0;

    /// <summary>
    /// Timer for throttling joystick movement updates to prevent excessive SignalR calls.
    /// </summary>
    private Timer? _joystickTimer;

    /// <summary>
    /// Last time joystick was updated to prevent excessive state changes.
    /// </summary>
    private DateTime _lastUpdate = DateTime.MinValue;

    /// <summary>
    /// Maximum distance the joystick knob can move from center in pixels.
    /// </summary>
    private const double JoystickRadius = 70.0;

    /// <summary>
    /// Minimum change threshold to trigger movement updates (reduces noise).
    /// </summary>
    private const double MovementThreshold = 0.05;

    /// <summary>
    /// Initializes the SignalR hub connection and subscribes to the ObjectTooNearStream.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/trilobotHub"))
            .WithAutomaticReconnect()
            .Build();

        _objectTooNearSubscription = _hubConnection.On<bool>(
            "ObjectTooNearUpdated", newValue =>
            {
                _isObjectTooNear = newValue;
                StateHasChanged();
            });

        _distanceSubscription = _hubConnection.On<double>(
            "DistanceUpdated", newValue =>
            {
                _distance = newValue;
                StateHasChanged();
            });

        // Connect to SignalR hub
        await _hubConnection.StartAsync();

        // Start distance monitoring
        await _hubConnection.InvokeAsync("StartDistanceMonitoring");
    }

    /// <summary>
    /// Handles mouse down events on the joystick for desktop interaction.
    /// </summary>
    /// <param name="e">Mouse event arguments</param>
    private void OnJoystickMouseDown(MouseEventArgs e)
    {
        _isDragging = true;
    }

    /// <summary>
    /// Handles mouse move events for joystick dragging on desktop.
    /// </summary>
    /// <param name="e">Mouse event arguments</param>
    private void OnJoystickMouseMove(MouseEventArgs e)
    {
        if (!_isDragging) return;
        
        // Calculate relative position from joystick center (100, 100 is center of 200x200 joystick)
        var deltaX = e.OffsetX - 100;
        var deltaY = e.OffsetY - 100;
        
        UpdateJoystickPosition(deltaX, deltaY);
    }

    /// <summary>
    /// Handles mouse up events to stop joystick dragging on desktop.
    /// </summary>
    /// <param name="e">Mouse event arguments</param>
    private void OnJoystickMouseUp(MouseEventArgs e)
    {
        _isDragging = false;
        ResetJoystick();
    }

    /// <summary>
    /// Handles touch start events on the joystick for mobile interaction.
    /// </summary>
    /// <param name="e">Touch event arguments</param>
    private void OnJoystickTouchStart(TouchEventArgs e)
    {
        if (e.Touches.Length > 0)
        {
            _isDragging = true;
        }
    }

    /// <summary>
    /// Handles touch move events for joystick dragging on mobile devices.
    /// </summary>
    /// <param name="e">Touch event arguments</param>
    private void OnJoystickTouchMove(TouchEventArgs e)
    {
        if (!_isDragging || e.Touches.Length == 0) return;
        
        var touch = e.Touches[0];
        // Calculate relative position from joystick center
        // Note: This is simplified - for production you'd want to get the actual element bounds
        var deltaX = touch.ClientX - 100; // Approximate center calculation
        var deltaY = touch.ClientY - 100;
        
        UpdateJoystickPosition(deltaX, deltaY);
    }

    /// <summary>
    /// Handles touch end events to stop joystick dragging on mobile.
    /// </summary>
    /// <param name="e">Touch event arguments</param>
    private void OnJoystickTouchEnd(TouchEventArgs e)
    {
        _isDragging = false;
        ResetJoystick();
    }

    /// <summary>
    /// Updates the joystick knob position and calculates movement values.
    /// </summary>
    /// <param name="deltaX">X offset from joystick center</param>
    /// <param name="deltaY">Y offset from joystick center</param>
    private void UpdateJoystickPosition(double deltaX, double deltaY)
    {
        // Calculate distance from center
        var distance = Math.Sqrt(deltaX * deltaX + deltaY * deltaY);
        
        // Constrain to joystick radius
        if (distance > JoystickRadius)
        {
            var angle = Math.Atan2(deltaY, deltaX);
            deltaX = Math.Cos(angle) * JoystickRadius;
            deltaY = Math.Sin(angle) * JoystickRadius;
        }

        // Update knob position
        _knobX = deltaX;
        _knobY = deltaY;

        // Calculate normalized movement values (-1.0 to 1.0)
        var newHorizontal = Math.Max(-1.0, Math.Min(1.0, deltaX / JoystickRadius));
        var newVertical = Math.Max(-1.0, Math.Min(1.0, -deltaY / JoystickRadius)); // Negative Y for forward

        // Apply movement threshold to reduce noise and prevent excessive updates
        if (Math.Abs(newHorizontal - _currentHorizontal) > MovementThreshold ||
            Math.Abs(newVertical - _currentVertical) > MovementThreshold)
        {
            _currentHorizontal = newHorizontal;
            _currentVertical = newVertical;

            // Send robot movement command
            _ = Task.Run(async () => await CallMotor(_currentHorizontal, _currentVertical));
        }

        // Throttle UI updates to prevent excessive re-rendering
        var now = DateTime.UtcNow;
        if (now - _lastUpdate > TimeSpan.FromMilliseconds(16)) // ~60 FPS max
        {
            _lastUpdate = now;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Resets the joystick to center position and stops robot movement.
    /// </summary>
    private void ResetJoystick()
    {
        _knobX = 0;
        _knobY = 0;
        _currentHorizontal = 0.0;
        _currentVertical = 0.0;
        
        // Stop robot movement immediately
        _ = Task.Run(async () => await CallMotor(0, 0));
        
        // Force immediate UI update for reset
        StateHasChanged();
    }

    /// <summary>
    /// Invokes a motor control method on the SignalR hub.
    /// </summary>
    /// <param name="horizontal"></param>
    /// <param name="vertical"></param>
    private async Task CallMotor(double horizontal = 0.0, double vertical = 0.0)
    {        
        if (_hubConnection is null || _hubConnection.State != HubConnectionState.Connected)
            return;

        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            await _hubConnection.InvokeAsync("Move", horizontal, vertical, cts.Token);
        }
        catch (TaskCanceledException)
        {
            // Optional: timeout handling
        }
        catch (Exception ex)
        {
            await Console.Error.WriteLineAsync($"Move failed: {ex.Message}");
        }
    }

    /// <summary>
    /// Moves the TriloBot forward.
    /// </summary>
    private Task Forward() => CallMotor(vertical: 1);

    /// <summary>
    /// Moves the TriloBot backward.
    /// </summary>
    private Task Backward() => CallMotor(vertical: -1);

    /// <summary>
    /// Turns the TriloBot to the left.
    /// </summary>
    private Task TurnLeft() => CallMotor(horizontal: 1);

    /// <summary>
    /// Turns the TriloBot to the right.
    /// </summary>
    private Task TurnRight() => CallMotor(horizontal: -1);

    /// <summary>
    /// Stops the TriloBot's movement.
    /// </summary>
    private Task Stop() => CallMotor(horizontal: 0, vertical: 0);

    /// <summary>
    /// Sets the LED state for a specific button.
    /// </summary>
    /// <param name="lightId">The light identifier (e.g., 0 -> ButtonA LED).</param>
    /// <param name="value">The LED state (1 for on, 0 for off).</param>
    private async Task SetButtonLed(int lightId, double value)
    {
        if (_hubConnection is null) return;
        await _hubConnection.InvokeAsync("SetButtonLed", lightId, value);
    }

    /// <summary>
    /// Sets the underlighting color of the TriloBot.
    /// </summary>
    /// <param name="r">Red component (0-255).</param>
    /// <param name="g">Green component (0-255).</param>
    /// <param name="b">Blue component (0-255).</param>
    private async Task FillUnderlighting(byte r, byte g, byte b)
    {
        if (_hubConnection is null) return;
        await _hubConnection.InvokeAsync("FillUnderlighting", r, g, b);
    }

    /// <summary>
    /// Disposes resources when component is disposed.
    /// </summary>
    public void Dispose()
    {
        _joystickTimer?.Dispose();
        _objectTooNearSubscription?.Dispose();
        _distanceSubscription?.Dispose();
        _ = _hubConnection?.DisposeAsync();
    }

}
